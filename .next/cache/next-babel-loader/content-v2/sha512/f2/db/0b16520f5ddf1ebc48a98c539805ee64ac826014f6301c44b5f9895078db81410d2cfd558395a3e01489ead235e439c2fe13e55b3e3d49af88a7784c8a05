{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as As from \"@effect-ts/core/Async\";\nimport { tag } from \"@effect-ts/core/Has\";\nimport * as Sy from \"@effect-ts/core/Sync\";\nimport * as Sl from \"@effect-ts/core/Sync/Layer\";\nexport const makeFetch = () => {\n  return {\n    fetch\n  };\n};\nexport const Fetch = tag();\nexport const FetchLive = Sl.fromFunction(Fetch)(makeFetch);\nexport class HttpError {\n  constructor(error) {\n    this.error = error;\n\n    _defineProperty(this, \"_tag\", \"HttpError\");\n  }\n\n}\nexport class JsonError {\n  constructor(error) {\n    this.error = error;\n\n    _defineProperty(this, \"_tag\", \"JsonError\");\n  }\n\n}\nexport const makeHttp = Sy.gen(function* (_) {\n  const {\n    fetch\n  } = yield* _(Fetch);\n  return {\n    getJson: url => As.gen(function* (_) {\n      const res = yield* _(As.promise(u => new HttpError(u))(() => fetch(url)));\n      const json = yield* _(As.promise(u => new JsonError(u))(() => res.json()));\n      return json;\n    })\n  };\n});\nexport const Http = tag();\nexport const LiveHttp = Sl.fromSync(Http)(makeHttp)[\"<<<\"](FetchLive);","map":{"version":3,"sources":["/Users/guevaser/Documents/challenge/adi-challenge/src/http.ts"],"names":["As","tag","Sy","Sl","makeFetch","fetch","Fetch","FetchLive","fromFunction","HttpError","constructor","error","JsonError","makeHttp","gen","_","getJson","url","res","promise","u","json","Http","LiveHttp","fromSync"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,4BAApB;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA;AADK,GAAP;AAGD,CAJM;AAQP,OAAO,MAAMC,KAAK,GAAGL,GAAG,EAAjB;AAEP,OAAO,MAAMM,SAAS,GAAGJ,EAAE,CAACK,YAAH,CAAgBF,KAAhB,EAAuBF,SAAvB,CAAlB;AAEP,OAAO,MAAMK,SAAN,CAAgB;AAErBC,EAAAA,WAAW,CAAUC,KAAV,EAA0B;AAAA,SAAhBA,KAAgB,GAAhBA,KAAgB;;AAAA,kCADrB,WACqB;AAAE;;AAFlB;AAIvB,OAAO,MAAMC,SAAN,CAAgB;AAErBF,EAAAA,WAAW,CAAUC,KAAV,EAA0B;AAAA,SAAhBA,KAAgB,GAAhBA,KAAgB;;AAAA,kCADrB,WACqB;AAAE;;AAFlB;AAKvB,OAAO,MAAME,QAAQ,GAAGX,EAAE,CAACY,GAAH,CAAO,WAAWC,CAAX,EAAc;AAC3C,QAAM;AAAEV,IAAAA;AAAF,MAAY,OAAOU,CAAC,CAACT,KAAD,CAA1B;AAEA,SAAO;AACLU,IAAAA,OAAO,EAAGC,GAAD,IACPjB,EAAE,CAACc,GAAH,CAAO,WAAWC,CAAX,EAAc;AACnB,YAAMG,GAAG,GAAG,OAAOH,CAAC,CAACf,EAAE,CAACmB,OAAH,CAAYC,CAAD,IAAO,IAAIX,SAAJ,CAAcW,CAAd,CAAlB,EAAoC,MAAMf,KAAK,CAACY,GAAD,CAA/C,CAAD,CAApB;AACA,YAAMI,IAAa,GAAG,OAAON,CAAC,CAC5Bf,EAAE,CAACmB,OAAH,CAAYC,CAAD,IAAO,IAAIR,SAAJ,CAAcQ,CAAd,CAAlB,EAAoC,MAAMF,GAAG,CAACG,IAAJ,EAA1C,CAD4B,CAA9B;AAIA,aAAOA,IAAP;AACD,KAPD;AAFG,GAAP;AAWD,CAduB,CAAjB;AAkBP,OAAO,MAAMC,IAAI,GAAGrB,GAAG,EAAhB;AAEP,OAAO,MAAMsB,QAAQ,GAAGpB,EAAE,CAACqB,QAAH,CAAYF,IAAZ,EAAkBT,QAAlB,EAA4B,KAA5B,EAAmCN,SAAnC,CAAjB","sourcesContent":["import * as As from \"@effect-ts/core/Async\"\nimport { tag } from \"@effect-ts/core/Has\"\nimport * as Sy from \"@effect-ts/core/Sync\"\nimport * as Sl from \"@effect-ts/core/Sync/Layer\"\nimport type { _A } from \"@effect-ts/core/Utils\"\n\nexport const makeFetch = () => {\n  return {\n    fetch\n  }\n}\n\nexport interface Fetch extends ReturnType<typeof makeFetch> {}\n\nexport const Fetch = tag<Fetch>()\n\nexport const FetchLive = Sl.fromFunction(Fetch)(makeFetch)\n\nexport class HttpError {\n  readonly _tag = \"HttpError\"\n  constructor(readonly error: unknown) {}\n}\nexport class JsonError {\n  readonly _tag = \"JsonError\"\n  constructor(readonly error: unknown) {}\n}\n\nexport const makeHttp = Sy.gen(function* (_) {\n  const { fetch } = yield* _(Fetch)\n\n  return {\n    getJson: (url: string) =>\n      As.gen(function* (_) {\n        const res = yield* _(As.promise((u) => new HttpError(u))(() => fetch(url)))\n        const json: unknown = yield* _(\n          As.promise((u) => new JsonError(u))(() => res.json())\n        )\n\n        return json\n      })\n  }\n})\n\nexport interface Http extends _A<typeof makeHttp> {}\n\nexport const Http = tag<Http>()\n\nexport const LiveHttp = Sl.fromSync(Http)(makeHttp)[\"<<<\"](FetchLive)\n"]},"metadata":{},"sourceType":"module"}