{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../../prelude\";\nimport * as As from \"@effect-ts/core/Async\";\nimport { tag } from \"@effect-ts/core/Has\";\nimport * as Sy from \"@effect-ts/core/Sync\";\nimport * as Sl from \"@effect-ts/core/Sync/Layer\";\nimport { matchTag } from \"@effect-ts/core/Utils\";\nimport { observable } from \"mobx\";\nimport { BarChartValues } from \"../../bar-chart-values\";\nexport class Done {\n  constructor(value) {\n    this.value = value;\n\n    _defineProperty(this, \"_tag\", \"Done\");\n  }\n\n}\nexport class Init {\n  constructor() {\n    _defineProperty(this, \"_tag\", \"Init\");\n  }\n\n}\nexport class Loading {\n  constructor() {\n    _defineProperty(this, \"_tag\", \"Loading\");\n  }\n\n}\nexport class Interrupted {\n  constructor() {\n    _defineProperty(this, \"_tag\", \"Interrupted\");\n  }\n\n}\nexport class Error {\n  constructor(error) {\n    this.error = error;\n\n    _defineProperty(this, \"_tag\", \"Error\");\n  }\n\n}\nexport const makeHomeSate = Sy.gen(function* (_) {\n  const {\n    getBarChartValues\n  } = yield* _(BarChartValues);\n  const state = observable({\n    current: new Init()\n  });\n\n  function propagateExit(ex) {\n    ex[\"|>\"](matchTag({\n      Success: ({\n        a\n      }) => {\n        state.current = new Done(a);\n      },\n      Failure: ({\n        e\n      }) => {\n        state.current = new Error(e);\n      },\n      Interrupt: () => {\n        state.current = new Interrupted();\n      }\n    }));\n  }\n\n  function next() {\n    const cancel = As.runAsync(getBarChartValues(), propagateExit);\n    state.current = new Loading();\n    return cancel;\n  }\n\n  return {\n    state,\n    next,\n    propagateExit\n  };\n});\nexport const HomeState = tag();\nexport const LiveHomeState = Sl.fromSync(HomeState)(makeHomeSate);","map":{"version":3,"sources":["/Users/guevaser/Documents/challenge/adi-challenge/src/components/Home/state.ts"],"names":["As","tag","Sy","Sl","matchTag","observable","BarChartValues","Done","constructor","value","Init","Loading","Interrupted","Error","error","makeHomeSate","gen","_","getBarChartValues","state","current","propagateExit","ex","Success","a","Failure","e","Interrupt","next","cancel","runAsync","HomeState","LiveHomeState","fromSync"],"mappings":";;AAAA,OAAe,eAAf;AACA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,4BAApB;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AAEA,OAAO,MAAMC,IAAN,CAAc;AAEnBC,EAAAA,WAAW,CAAUC,KAAV,EAAoB;AAAA,SAAVA,KAAU,GAAVA,KAAU;;AAAA,kCADf,MACe;AAAE;;AAFd;AAKrB,OAAO,MAAMC,IAAN,CAAW;AAAA;AAAA,kCACA,MADA;AAAA;;AAAA;AAIlB,OAAO,MAAMC,OAAN,CAAc;AAAA;AAAA,kCACH,SADG;AAAA;;AAAA;AAIrB,OAAO,MAAMC,WAAN,CAAkB;AAAA;AAAA,kCACP,aADO;AAAA;;AAAA;AAIzB,OAAO,MAAMC,KAAN,CAAe;AAEpBL,EAAAA,WAAW,CAAUM,KAAV,EAAoB;AAAA,SAAVA,KAAU,GAAVA,KAAU;;AAAA,kCADf,OACe;AAAE;;AAFb;AAStB,OAAO,MAAMC,YAAY,GAAGb,EAAE,CAACc,GAAH,CAAO,WAAWC,CAAX,EAAc;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAwB,OAAOD,CAAC,CAACX,cAAD,CAAtC;AACA,QAAMa,KAAK,GAAGd,UAAU,CAEvB;AAAEe,IAAAA,OAAO,EAAE,IAAIV,IAAJ;AAAX,GAFuB,CAAxB;;AAIA,WAASW,aAAT,CACEC,EADF,EAKE;AACAA,IAAAA,EAAE,CAAC,IAAD,CAAF,CACElB,QAAQ,CAAC;AACPmB,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAW;AAClBL,QAAAA,KAAK,CAACC,OAAN,GAAgB,IAAIb,IAAJ,CAASiB,CAAT,CAAhB;AACD,OAHM;AAIPC,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAW;AAClBP,QAAAA,KAAK,CAACC,OAAN,GAAgB,IAAIP,KAAJ,CAAUa,CAAV,CAAhB;AACD,OANM;AAOPC,MAAAA,SAAS,EAAE,MAAM;AACfR,QAAAA,KAAK,CAACC,OAAN,GAAgB,IAAIR,WAAJ,EAAhB;AACD;AATM,KAAD,CADV;AAaD;;AAED,WAASgB,IAAT,GAAgB;AAGd,UAAMC,MAAM,GAAG7B,EAAE,CAAC8B,QAAH,CAAYZ,iBAAiB,EAA7B,EAAiCG,aAAjC,CAAf;AAEAF,IAAAA,KAAK,CAACC,OAAN,GAAgB,IAAIT,OAAJ,EAAhB;AAEA,WAAOkB,MAAP;AACD;;AAED,SAAO;AACLV,IAAAA,KADK;AAELS,IAAAA,IAFK;AAGLP,IAAAA;AAHK,GAAP;AAKD,CA1C2B,CAArB;AA8CP,OAAO,MAAMU,SAAS,GAAG9B,GAAG,EAArB;AAEP,OAAO,MAAM+B,aAAa,GAAG7B,EAAE,CAAC8B,QAAH,CAAYF,SAAZ,EAAuBhB,YAAvB,CAAtB","sourcesContent":["import {} from \"../../prelude\";\nimport * as As from \"@effect-ts/core/Async\";\nimport { tag } from \"@effect-ts/core/Has\";\nimport * as Sy from \"@effect-ts/core/Sync\";\nimport * as Sl from \"@effect-ts/core/Sync/Layer\";\nimport type { _A, _E } from \"@effect-ts/core/Utils\";\nimport { matchTag } from \"@effect-ts/core/Utils\";\nimport { observable } from \"mobx\";\nimport { RainfallAmount } from \"../../model\";\nimport { BarChartValues } from \"../../bar-chart-values\";\n\nexport class Done<A> {\n  readonly _tag = \"Done\";\n  constructor(readonly value: A) {}\n}\n\nexport class Init {\n  readonly _tag = \"Init\";\n}\n\nexport class Loading {\n  readonly _tag = \"Loading\";\n}\n\nexport class Interrupted {\n  readonly _tag = \"Interrupted\";\n}\n\nexport class Error<E> {\n  readonly _tag = \"Error\";\n  constructor(readonly error: E) {}\n}\n\nexport interface State<E, A> {\n  current: Init | Loading | Error<E> | Done<A> | Interrupted;\n}\n\nexport const makeHomeSate = Sy.gen(function* (_) {\n  const { getBarChartValues } = yield* _(BarChartValues);\n  const state = observable(<\n    State<_E<ReturnType<typeof getBarChartValues>>, readonly RainfallAmount[]>\n  >{ current: new Init() });\n\n  function propagateExit(\n    ex: As.Exit<\n      _E<ReturnType<typeof getBarChartValues>>,\n      readonly RainfallAmount[]\n    >\n  ) {\n    ex[\"|>\"](\n      matchTag({\n        Success: ({ a }) => {\n          state.current = new Done(a);\n        },\n        Failure: ({ e }) => {\n          state.current = new Error(e);\n        },\n        Interrupt: () => {\n          state.current = new Interrupted();\n        },\n      })\n    );\n  }\n\n  function next() {\n\n\n    const cancel = As.runAsync(getBarChartValues(), propagateExit);\n\n    state.current = new Loading();\n\n    return cancel;\n  }\n\n  return {\n    state,\n    next,\n    propagateExit,\n  };\n});\n\nexport interface HomeState extends _A<typeof makeHomeSate> {}\n\nexport const HomeState = tag<HomeState>();\n\nexport const LiveHomeState = Sl.fromSync(HomeState)(makeHomeSate);\n\nexport type StateError<S extends State<any, any>> = [S] extends [\n  State<infer E, infer A>\n]\n  ? E\n  : never;\n"]},"metadata":{},"sourceType":"module"}